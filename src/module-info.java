module MC_Problem {
	/*作业信息
	小组人数：1
	组员姓名：朱轩汉 
	BJUT学号：19371202 
	UCD学号：19206123

	项目概述
	代码的提交形式为压缩包中的一整个项目文件夹，源代码为.java格式，可import进Eclipse查看并运行。

	本项目的完成为一人用Java编写，在Eclipse上完成，旨在通过A*算法解决传教士野人问题（Missionaries-Cannibals Problem）及其变体。

	整个Java Project分为两个包，一部分为供用户解决问题的交互界面的构建，即solving_interface包和其中的唯一的Main类这一部分；
	另一个utils包中包含为了解决MC问题所构建的State class，Node class，StateList class，MC_Problem class，以及Position interface, List interface，
	其中State class用于实例化状态空间搜索图中的各个不同状态；Node和StateList用于构建A*算法中存储记录搜索状态的OPEN表和CLOSE表；MC_Problem
	类则用于实例化不同野人传教士数量和不同的船的载客量条件下的不同MC问题变体，同时在该类中实现了A*算法来解决各个不同条件下的问题，后续会
	在该类中实现更多不同的可以解决MC问题的搜索算法，如深度优先搜索算法(DFS)或广度优先搜索(BFS)。

	程序运行后会将问题相关解的情况同时输出到Console窗口和代码所在src文件所在目录下的results.txt文件中，若问题有解，则所有A*算法可找到的最优解
	都会被输出，若问题无解，程序也会将该状况记录为No Solutions。程序运行的最开始将提供一个野人传教士数量为3，船的载客量为2的示例并将结果输出，
	可用于验证程序是否正常运行。程序每运行一次，results.txt文件会被覆写一次。

	算法的启发函数应用了教材上所写的 h(n)=M+C-2B。若程序正常运行，可观察到所得各个解中的各个中间状态的启发函数值都小于从该状态得到解
	所需的步骤，所以算法满足h(n)<=h*(n)的条件，可验证算法为A*算法。


	A*，深度优先，广度优先搜索算法的伪代码归纳如下：
	1.把初始节点 S0 放入 Open 表中；
	2.检查 Open 表是否为空，若为空，则问题无解，失败退出；
	3.把 Open 表的第一个节点取出放入 Closed 表，并记该节点为节点 n；
	4.考察节点 n 是否为目标节点。若是则得到了问题的解，成功退出；
	5.若节点 n 不可扩展，则转第 2 步；
	6.扩展节点 n，生成一组子节点。遍历 Closed 表，按如下策略删去重复节点：
		重复节点删除策略：若子节点是重复节点 且 深度大于原节点，则删除；（注）
	7.将子节点插入到 Open 表中，三种搜索算法对应三种不同的插入策略：
		（1）A* 算法：依据估价函数值寻找正确的插入位置，维护一个依估价函数值有序的 Open 表；
		（2）广度优先搜索：将子节点插入到 Open 表的尾部；
		（3）深度优先搜索：将子节点插入到 Open 表的首部；
	8.转第 2 步。
	注：之所以还需要保留相同深度的重复节点是为了输出所有步数最少的路径的操作步骤。在本代码中的实现没有直接以“删除”的形式表现，
	而是以“不添加”的方式实现。*/
}